/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.herumi.mcl;

public class Bn256 {
  public static void SystemInit() {
    Bn256JNI.SystemInit();
  }

  public static void neg(Fr y, Fr x) {
    Bn256JNI.neg__SWIG_0(Fr.getCPtr(y), y, Fr.getCPtr(x), x);
  }

  public static void add(Fr z, Fr x, Fr y) {
    Bn256JNI.add__SWIG_0(Fr.getCPtr(z), z, Fr.getCPtr(x), x, Fr.getCPtr(y), y);
  }

  public static void sub(Fr z, Fr x, Fr y) {
    Bn256JNI.sub__SWIG_0(Fr.getCPtr(z), z, Fr.getCPtr(x), x, Fr.getCPtr(y), y);
  }

  public static void mul(Fr z, Fr x, Fr y) {
    Bn256JNI.mul__SWIG_0(Fr.getCPtr(z), z, Fr.getCPtr(x), x, Fr.getCPtr(y), y);
  }

  public static void mul(G1 z, G1 x, Fr y) {
    Bn256JNI.mul__SWIG_1(G1.getCPtr(z), z, G1.getCPtr(x), x, Fr.getCPtr(y), y);
  }

  public static void mul(G2 z, G2 x, Fr y) {
    Bn256JNI.mul__SWIG_2(G2.getCPtr(z), z, G2.getCPtr(x), x, Fr.getCPtr(y), y);
  }

  public static void div(Fr z, Fr x, Fr y) {
    Bn256JNI.div(Fr.getCPtr(z), z, Fr.getCPtr(x), x, Fr.getCPtr(y), y);
  }

  public static void pow(GT z, GT x, Fr y) {
    Bn256JNI.pow(GT.getCPtr(z), z, GT.getCPtr(x), x, Fr.getCPtr(y), y);
  }

  public static void neg(G1 y, G1 x) {
    Bn256JNI.neg__SWIG_1(G1.getCPtr(y), y, G1.getCPtr(x), x);
  }

  public static void dbl(G1 y, G1 x) {
    Bn256JNI.dbl__SWIG_0(G1.getCPtr(y), y, G1.getCPtr(x), x);
  }

  public static void add(G1 z, G1 x, G1 y) {
    Bn256JNI.add__SWIG_1(G1.getCPtr(z), z, G1.getCPtr(x), x, G1.getCPtr(y), y);
  }

  public static void sub(G1 z, G1 x, G1 y) {
    Bn256JNI.sub__SWIG_1(G1.getCPtr(z), z, G1.getCPtr(x), x, G1.getCPtr(y), y);
  }

  public static void pairing(GT e, G1 P, G2 Q) {
    Bn256JNI.pairing(GT.getCPtr(e), e, G1.getCPtr(P), P, G2.getCPtr(Q), Q);
  }

  public static void neg(G2 y, G2 x) {
    Bn256JNI.neg__SWIG_2(G2.getCPtr(y), y, G2.getCPtr(x), x);
  }

  public static void dbl(G2 y, G2 x) {
    Bn256JNI.dbl__SWIG_1(G2.getCPtr(y), y, G2.getCPtr(x), x);
  }

  public static void add(G2 z, G2 x, G2 y) {
    Bn256JNI.add__SWIG_2(G2.getCPtr(z), z, G2.getCPtr(x), x, G2.getCPtr(y), y);
  }

  public static void sub(G2 z, G2 x, G2 y) {
    Bn256JNI.sub__SWIG_2(G2.getCPtr(z), z, G2.getCPtr(x), x, G2.getCPtr(y), y);
  }

  public static void mul(GT z, GT x, GT y) {
    Bn256JNI.mul__SWIG_3(GT.getCPtr(z), z, GT.getCPtr(x), x, GT.getCPtr(y), y);
  }

}
